class MusicCollectionApp{constructor(){this.currentFilter='all';this.currentSearch='';this.editingAlbum=null;this.autocompleteTimeout=null;this.artistAutocompleteTimeout=null;this.albumAutocompleteTimeout=null;this.isAuthenticated=!1;this.init()}
async fetchWithCache(url,options={}){const defaultOptions={cache:'default',headers:{'Content-Type':'application/json',...options.headers}};return fetch(url,{...defaultOptions,...options})}
init(){this.checkAuthStatus();this.loadStats();this.loadAlbums();this.bindEvents();this.setupAutocomplete()}
async checkAuthStatus(){try{const response=await this.fetchWithCache('api/music_api.php?action=auth_check');const data=await response.json();if(data.success){this.isAuthenticated=data.data.authenticated}}catch(error){this.isAuthenticated=!1}
this.updateAuthUI()}
updateAuthUI(){const addBtn=document.getElementById('addAlbumBtn');const loginBtn=document.getElementById('loginBtn');const logoutBtn=document.getElementById('logoutBtn');if(addBtn){if(this.isAuthenticated){addBtn.textContent='+ Add Album';addBtn.style.opacity='1';addBtn.style.cursor='pointer'}else{addBtn.textContent='+ Add Album (Login Required)';addBtn.style.opacity='0.7';addBtn.style.cursor='pointer'}}
if(loginBtn){loginBtn.style.display=this.isAuthenticated?'none':'flex'}
if(logoutBtn){logoutBtn.style.display=this.isAuthenticated?'flex':'none'}}
bindEvents(){document.getElementById('searchInput').addEventListener('input',(e)=>{this.currentSearch=e.target.value;this.debounceSearch()});document.querySelectorAll('.filter-btn').forEach(btn=>{btn.addEventListener('click',(e)=>{this.setFilter(e.target.dataset.filter)})});document.getElementById('addAlbumBtn').addEventListener('click',()=>{this.showModal()});document.getElementById('albumModal').addEventListener('click',(e)=>{if(e.target.id==='albumModal'){this.hideModal()}});document.getElementById('coverModal').addEventListener('click',(e)=>{if(e.target.id==='coverModal'){this.hideCoverModal()}});document.getElementById('tracklistModal').addEventListener('click',(e)=>{if(e.target.id==='tracklistModal'){this.hideTracklistModal()}});document.querySelectorAll('.close').forEach(closeBtn=>{closeBtn.addEventListener('click',(e)=>{e.preventDefault();e.stopPropagation();const modal=closeBtn.closest('.modal');if(modal){if(modal.id==='albumModal'){this.hideModal()}else if(modal.id==='coverModal'){this.hideCoverModal()}else if(modal.id==='tracklistModal'){this.hideTracklistModal()}else if(modal.id==='loginModal'){this.hideLoginModal()}}});closeBtn.addEventListener('touchend',(e)=>{e.preventDefault();e.stopPropagation();const modal=closeBtn.closest('.modal');if(modal){if(modal.id==='albumModal'){this.hideModal()}else if(modal.id==='coverModal'){this.hideCoverModal()}else if(modal.id==='tracklistModal'){this.hideTracklistModal()}else if(modal.id==='loginModal'){this.hideLoginModal()}}})});document.getElementById('loginModal').addEventListener('click',(e)=>{if(e.target.id==='loginModal'){this.hideLoginModal()}});document.getElementById('loginForm').addEventListener('submit',(e)=>{e.preventDefault();this.handleLogin(e)});document.querySelector('#loginModal .btn-cancel').addEventListener('click',()=>{this.hideLoginModal()});document.getElementById('albumsTable').addEventListener('click',(e)=>{if(e.target.classList.contains('album-cover')){const artist=e.target.dataset.artist;const album=e.target.dataset.album;const year=e.target.dataset.year;const cover=e.target.dataset.cover;this.showCoverModal(artist,album,year,cover)}
if(e.target.classList.contains('album-link')){e.preventDefault();const artist=e.target.dataset.artist;const album=e.target.dataset.album;const year=e.target.dataset.year;const albumId=e.target.closest('tr').dataset.id;this.showTracklist(artist,album,year,albumId)}
if(e.target.classList.contains('btn-edit')){const id=e.target.dataset.id;if(id){this.editAlbum(parseInt(id))}}
if(e.target.classList.contains('btn-delete')){const id=e.target.dataset.id;if(id){this.deleteAlbum(parseInt(id))}}});document.getElementById('albumForm').addEventListener('submit',(e)=>{e.preventDefault();this.saveAlbum()});document.getElementById('cancelBtn').addEventListener('click',()=>{this.hideModal()})}
setupAutocomplete(){const artistInput=document.getElementById('artistName');const albumInput=document.getElementById('albumName');this.updateAlbumInputState();artistInput.addEventListener('input',(e)=>{this.debounceArtistAutocomplete(e.target.value);this.updateAlbumInputState()});albumInput.addEventListener('input',(e)=>{const artistValue=artistInput.value.trim();if(artistValue&&artistValue.length>0){this.debounceAlbumAutocomplete(artistValue,e.target.value)}else{this.hideAutocomplete('albumAutocomplete')}});artistInput.addEventListener('input',(e)=>{if(!e.target.value.trim()){this.hideAutocomplete('albumAutocomplete');albumInput.value='';this.updateAlbumInputState()}});artistInput.addEventListener('blur',(e)=>{setTimeout(()=>{this.hideAutocomplete('artistAutocomplete')},500)});albumInput.addEventListener('blur',(e)=>{setTimeout(()=>{this.hideAutocomplete('albumAutocomplete')},500)});document.addEventListener('click',(e)=>{if(!e.target.closest('.autocomplete-container')){this.hideAutocomplete('artistAutocomplete');this.hideAutocomplete('albumAutocomplete')}});this.setupDropdown()}
setupDropdown(){const dropdown=document.querySelector('.dropdown');const dropdownMenu=document.querySelector('.dropdown-menu');if(dropdown&&dropdownMenu){dropdownMenu.addEventListener('click',(e)=>{e.stopPropagation()});document.addEventListener('click',(e)=>{if(!dropdown.contains(e.target)){dropdown.classList.remove('active')}});dropdown.addEventListener('keydown',(e)=>{if(e.key==='Escape'){dropdown.classList.remove('active');dropdown.querySelector('.dropdown-toggle').blur()}})}}
updateAlbumInputState(){const artistInput=document.getElementById('artistName');const albumInput=document.getElementById('albumName');if(artistInput&&albumInput){const artistValue=artistInput.value.trim();if(artistValue&&artistValue.length>0){albumInput.disabled=!1;albumInput.placeholder='Enter album name...'}else{albumInput.disabled=!0;albumInput.placeholder='Select an artist first...'}}}
debounceArtistAutocomplete(search){clearTimeout(this.artistAutocompleteTimeout);this.artistAutocompleteTimeout=setTimeout(()=>{this.handleArtistAutocomplete(search)},300)}
debounceAlbumAutocomplete(artist,search){clearTimeout(this.albumAutocompleteTimeout);this.albumAutocompleteTimeout=setTimeout(()=>{this.handleAlbumAutocomplete(artist,search)},300)}
async handleArtistAutocomplete(search){if(search.length<2){this.hideAutocomplete('artistAutocomplete');return}
this.showAutocompleteLoading('artistAutocomplete');try{const url=`api/music_api.php?action=artists&search=${encodeURIComponent(search)}`;const response=await this.fetchWithCache(url);const data=await response.json();if(data.success){this.showAutocomplete('artistAutocomplete',data.data,'artist_name')}else{this.hideAutocomplete('artistAutocomplete')}}catch(error){this.hideAutocomplete('artistAutocomplete')}}
async handleAlbumAutocomplete(artist,search){if(search.length<2){this.hideAutocomplete('albumAutocomplete');return}
this.showAutocompleteLoading('albumAutocomplete');try{const url=`api/music_api.php?action=albums_by_artist&artist=${encodeURIComponent(artist)}&search=${encodeURIComponent(search)}`;const response=await this.fetchWithCache(url);const data=await response.json();if(data.success){this.showAutocomplete('albumAutocomplete',data.data,'album_name')}else{this.hideAutocomplete('albumAutocomplete')}}catch(error){this.hideAutocomplete('albumAutocomplete')}}
showAutocomplete(containerId,items,field){const container=document.getElementById(containerId);let list=container.querySelector('.autocomplete-list');if(!list){list=document.querySelector(`[data-original-container="${containerId}"]`)}
if(!list){return}
list.innerHTML='';items.forEach(item=>{if(item&&item[field]&&item[field]!=='undefined'){const div=document.createElement('div');div.className='autocomplete-item';const textSpan=document.createElement('span');if(field==='album_name'&&item.year){textSpan.textContent=`${item[field]} (${item.year})`}else{textSpan.textContent=item[field]}
div.appendChild(textSpan);if(item.cover_url){const coverImg=document.createElement('img');coverImg.src=item.cover_url;coverImg.className='autocomplete-cover';coverImg.alt='Album cover';coverImg.onerror=()=>{coverImg.remove()};coverImg.onload=()=>{};div.appendChild(coverImg)}
div.addEventListener('click',(e)=>{e.preventDefault();e.stopPropagation();this.selectAutocompleteItem(containerId,item[field],item)});list.appendChild(div)}});if(list.children.length>0){list.style.display='block';list.style.visibility='visible';list.style.opacity='1';list.style.zIndex='10000';list.style.position='absolute';list.style.backgroundColor='white';list.style.border='1px solid #ddd';list.style.borderRadius='4px';list.style.boxShadow='0 2px 8px rgba(0,0,0,0.1)';this.adjustAutocompletePosition(container,list);setTimeout(()=>{this.adjustAutocompletePosition(container,list)},10)}else{list.style.display='none'}}
showAutocompleteLoading(containerId){const container=document.getElementById(containerId);let list=container.querySelector('.autocomplete-list');if(!list){list=document.querySelector(`[data-original-container="${containerId}"]`)}
if(list){list.innerHTML='<div class="autocomplete-loading">Searching...</div>';list.style.display='block'}}
hideAutocomplete(containerId){const container=document.getElementById(containerId);let list=container.querySelector('.autocomplete-list');if(!list){list=document.querySelector(`[data-original-container="${containerId}"]`)}
if(list){list.style.display='none';list.style.visibility='hidden';list.style.opacity='0';if(list.parentNode===document.body&&list.dataset.originalContainer){const originalContainer=document.getElementById(list.dataset.originalContainer);if(originalContainer){originalContainer.appendChild(list);list.style.position='';list.style.top='';list.style.left='';list.style.width='';list.style.zIndex='';delete list.dataset.originalContainer}}}}
selectAutocompleteItem(containerId,value,item=null){const container=document.getElementById(containerId);const input=container.querySelector('input');if(input){if(containerId==='albumAutocomplete'){input.value=value}else{input.value=value}
if(item){if(containerId==='artistAutocomplete'){this.selectedArtist=item}else if(containerId==='albumAutocomplete'){this.selectedAlbum=item;this.selectedDiscogsReleaseId=item.id||null;this.selectedCoverUrl=item.cover_url||null;if(item.year){const yearInput=document.getElementById('releaseYear');if(yearInput){yearInput.value=item.year}}}}}
this.hideAutocomplete(containerId)}
debounceSearch(){clearTimeout(this.autocompleteTimeout);this.autocompleteTimeout=setTimeout(()=>{this.loadAlbums()},300)}
setFilter(filter){this.currentFilter=filter;document.querySelectorAll('.filter-btn').forEach(btn=>{btn.classList.remove('active')});document.querySelector(`[data-filter="${filter}"]`).classList.add('active');this.loadAlbums()}
async loadStats(){try{const response=await this.fetchWithCache('api/music_api.php?action=stats');const data=await response.json();if(data.success){this.updateStats(data.data)}}catch(error){}}
updateStats(stats){document.getElementById('totalAlbums').textContent=stats.total_albums||0;document.getElementById('ownedAlbums').textContent=stats.owned_count||0;document.getElementById('wantedAlbums').textContent=stats.wanted_count||0;document.getElementById('uniqueArtists').textContent=stats.unique_artists||0}
async loadAlbums(){this.showLoading();const tableContainer=document.querySelector('.table-container');if(tableContainer){tableContainer.classList.add('loading')}
try{const params=new URLSearchParams({action:'albums',filter:this.currentFilter,search:this.currentSearch});const response=await this.fetchWithCache(`api/music_api.php?${params}`);const data=await response.json();if(data.success){this.renderAlbums(data.data)}else{this.showMessage('Error loading albums: '+data.message,'error')}}catch(error){this.showMessage('Error loading albums','error')}finally{this.hideLoading();if(tableContainer){tableContainer.classList.remove('loading')}}}
renderAlbums(albums){const tbody=document.querySelector('#albumsTable tbody');if(albums.length===0){tbody.innerHTML=`
              <tr>
                  <td colspan="5" class="empty-state">
                      <h3>No albums found</h3>
                      <p>Try adjusting your search or filter criteria</p>
                  </td>
              </tr>
          `;return}
tbody.innerHTML=albums.map(album=>`
          <tr data-id="${album.id}">
              <td class="cover-cell">
                  ${album.cover_url ? 
                      `<img data-src="${album.cover_url}" data-medium="${album.cover_url_medium || album.cover_url}" data-large="${album.cover_url_large || album.cover_url}" class="album-cover lazy" alt="Album cover" data-artist="${this.escapeHtml(album.artist_name)}" data-album="${this.escapeHtml(album.album_name)}" data-year="${album.release_year || ''}" data-cover="${album.cover_url_large || album.cover_url}" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" onload="this.classList.add('loaded')"><div class="no-cover" style="display: none;">No Cover</div>` : 
                      '<div class="no-cover">No Cover</div>'
                  }
                  <div class="mobile-status">
                      ${album.is_owned ? '<span class="status-owned">Own</span>' : ''}
                      ${album.want_to_own ? '<span class="status-wanted">Want</span>' : ''}
                      ${!album.is_owned && !album.want_to_own ? '<span class="status-none">-</span>' : ''}
                  </div>
              </td>
              <td>
                  <div class="album-info">
                      <div class="artist-name">${this.escapeHtml(album.artist_name)}</div>
                      <div class="album-name">
                          <a href="#" class="album-link" data-artist="${this.escapeHtml(album.artist_name)}" data-album="${this.escapeHtml(album.album_name)}" data-year="${album.release_year || ''}">
                              ${this.escapeHtml(album.album_name)}
                          </a>
                      </div>
                      <div class="mobile-year">${album.release_year ? `<span class="year-badge">${album.release_year}</span>` : '<span class="year-badge">-</span>'}</div>
                      <div class="mobile-actions">
                          <button class="btn-edit" data-id="${album.id}">Edit</button>
                          <button class="btn-delete" data-id="${album.id}">Delete</button>
                      </div>
                  </div>
              </td>
              <td>
                  ${album.release_year ? `<span class="year-badge">${album.release_year}</span>` : '<span class="year-badge">-</span>'}
              </td>
              <td>
                  ${album.is_owned ? '<span class="checkmark">✓</span>' : '<span class="checkmark">&nbsp;</span>'}
              </td>
              <td>
                  ${album.want_to_own ? '<span class="checkmark">✓</span>' : '<span class="checkmark">&nbsp;</span>'}
              </td>
              <td>
                  <div class="action-buttons">
                      <button class="btn-edit" data-id="${album.id}">Edit</button>
                      <button class="btn-delete" data-id="${album.id}">Delete</button>
                  </div>
              </td>
          </tr>
      `).join('');this.initLazyLoading()}
async editAlbum(id){try{const response=await this.fetchWithCache(`api/music_api.php?action=album&id=${id}`);const data=await response.json();if(data.success){this.editingAlbum=data.data;this.showModal(data.data)}else{this.showMessage('Error loading album: '+data.message,'error')}}catch(error){this.showMessage('Error loading album','error')}}
async deleteAlbum(id){if(!this.isAuthenticated){this.showLoginModal();return}
if(!confirm('Are you sure you want to delete this album?')){return}
try{const response=await fetch('api/music_api.php?action=delete',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id:id})});const data=await response.json();if(data.success){this.showMessage('Album deleted successfully','success');this.loadAlbums();this.loadStats()}else{if(data.auth_required){this.showLoginModal()}else{this.showMessage('Error deleting album: '+data.message,'error')}}}catch(error){this.showMessage('Error deleting album','error')}}
showModal(album=null){const modal=document.getElementById('albumModal');const form=document.getElementById('albumForm');const title=document.querySelector('#albumModal h2');form.reset();this.hideModalMessage();if(album){title.textContent='Edit Album';document.getElementById('artistName').value=album.artist_name;document.getElementById('albumName').value=album.album_name;document.getElementById('releaseYear').value=album.release_year||'';this.selectedCoverUrl=album.cover_url||null;this.selectedDiscogsReleaseId=album.discogs_release_id||null;if(album.is_owned==1){document.getElementById('isOwned').checked=!0}else if(album.want_to_own==1){document.getElementById('wantToOwn').checked=!0}
const albumInput=document.getElementById('albumName');albumInput.disabled=!1;albumInput.placeholder='Enter album name...'}else{title.textContent='Add New Album';this.editingAlbum=null;this.selectedCoverUrl=null;this.selectedDiscogsReleaseId=null;this.updateAlbumInputState()}
modal.style.display='block';document.getElementById('artistName').focus()}
hideModal(){document.getElementById('albumModal').style.display='none';this.editingAlbum=null;this.selectedCoverUrl=null;this.selectedDiscogsReleaseId=null;this.hideModalMessage()}
hideModalMessage(){const messageEl=document.getElementById('modalMessage');messageEl.style.display='none';messageEl.textContent='';messageEl.className='modal-message'}
async saveAlbum(){if(!this.isAuthenticated){this.showLoginModal();return}
const form=document.getElementById('albumForm');const formData=new FormData(form);const albumStatus=formData.get('albumStatus');if(!albumStatus){this.showModalMessage('Please select either "I own this album" or "I want to own this album"','error');return}
const albumData={artist_name:formData.get('artistName'),album_name:formData.get('albumName'),release_year:formData.get('releaseYear'),is_owned:albumStatus==='owned',want_to_own:albumStatus==='wanted',cover_url:this.selectedCoverUrl||null,discogs_release_id:this.selectedDiscogsReleaseId||null};const action=this.editingAlbum?'update':'add';if(this.editingAlbum){albumData.id=this.editingAlbum.id}
try{const response=await fetch(`api/music_api.php?action=${action}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(albumData)});if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`)}
const responseText=await response.text();if(!responseText.trim()){throw new Error('Empty response from server')}
let data;try{data=JSON.parse(responseText)}catch(jsonError){throw new Error(`Invalid JSON response: ${jsonError.message}`)}
if(data.success){this.hideModal();this.showMessage(data.message,'success');this.loadAlbums();this.loadStats();this.editingAlbum=null}else{if(data.auth_required){this.showLoginModal()}else{this.showModalMessage(data.message||'Unknown error occurred','error')}}}catch(error){this.showModalMessage('Network error: '+error.message,'error')}}
showLoading(){document.getElementById('loading').style.display='block'}
hideLoading(){document.getElementById('loading').style.display='none'}
showModalMessage(message,type){const messageEl=document.getElementById('modalMessage');messageEl.textContent=message;messageEl.className=`modal-message ${type}`;messageEl.style.display='block';setTimeout(()=>{messageEl.style.display='none'},5000)}
showMessage(message,type){const messageEl=document.getElementById('message');messageEl.textContent=message;messageEl.className=`message ${type}`;messageEl.style.display='block';setTimeout(()=>{messageEl.style.display='none'},5000)}
showCoverModal(artistName,albumName,releaseYear,coverUrl){const modal=document.getElementById('coverModal');const image=document.getElementById('coverModalImage');const info=document.getElementById('coverModalInfo');image.src=coverUrl;image.alt=`${albumName} by ${artistName}`;info.innerHTML=`
          <div class="artist-name">${this.escapeHtml(artistName)}</div>
          <div class="album-name">${this.escapeHtml(albumName)}</div>
          ${releaseYear ? `<div class="album-year">${releaseYear}</div>` : ''}
      `;modal.style.display='block'}
hideCoverModal(){document.getElementById('coverModal').style.display='none'}
async showTracklist(artistName,albumName,releaseYear,albumId=null){const modal=document.getElementById('tracklistModal');const title=document.getElementById('tracklistModalTitle');const info=document.getElementById('tracklistModalInfo');const tracks=document.getElementById('tracklistModalTracks');const discogsLink=document.getElementById('tracklistModalDiscogsLink');const coverImage=document.getElementById('tracklistModalCover');const noCover=document.getElementById('tracklistModalNoCover');title.textContent=`${albumName}`;info.innerHTML=`
          <div><strong>Artist:</strong> ${artistName}</div>
          ${releaseYear ? `<div><strong>Year:</strong>${releaseYear}</div>` : ''}
      `;coverImage.style.display='none';noCover.style.display='none';noCover.textContent='';let existingImage=null;if(albumId){const tableRow=document.querySelector(`tr[data-id="${albumId}"]`);if(tableRow){const tableImage=tableRow.querySelector('.album-cover');if(tableImage&&tableImage.src&&tableImage.src!==window.location.href){existingImage=tableImage.src;console.log('Found existing image in table:',existingImage)}}}
if(existingImage){console.log('Using existing table image for instant loading');coverImage.src=existingImage;coverImage.style.display='block';noCover.style.display='none';coverImage.classList.add('loaded')}
tracks.innerHTML='<div class="tracklist-loading">Loading tracklist...</div>';modal.style.display='block';try{const params=new URLSearchParams({artist:artistName,album:albumName});if(releaseYear){params.append('year',releaseYear)}
if(albumId){params.append('album_id',albumId)}
const response=await this.fetchWithCache(`api/tracklist_api.php?${params}`);const data=await response.json();if(data.success&&data.data){const albumData=data.data;let formattedReleased='';if(albumData.released){try{let dateString=albumData.released;let hasDay00=!1;if(dateString.match(/^\d{4}-\d{2}-00$/)){hasDay00=!0;dateString=dateString.replace('-00','-01')}
const dateParts=dateString.split('-');const year=parseInt(dateParts[0]);const month=parseInt(dateParts[1])-1;const day=parseInt(dateParts[2]);const date=new Date(year,month,day);if(!isNaN(date.getTime())){const month=date.getMonth();const day=date.getDate();if(hasDay00||(month===11&&day===31)){formattedReleased=date.toLocaleDateString('en-US',{month:'short',year:'numeric'})}else{formattedReleased=date.toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})}}else{formattedReleased=albumData.released}}catch(e){formattedReleased=albumData.released}}
let reviewsDisplay='';if(albumData.rating_count){if(albumData.has_reviews_with_content){reviewsDisplay=`<div class="rating-count">(based on <a href="${albumData.discogs_url}#release-reviews" target="_blank" rel="noopener noreferrer" style="padding-left: .25em;">${albumData.rating_count} reviews</a>)</div>`}else{reviewsDisplay=`<div class="rating-count">(based on ${albumData.rating_count} reviews)</div>`}}
const removeTrailingNumbers=(text)=>{if(!text)return text;return text.replace(/\s*\(\d+\)\s*$/,'')};info.innerHTML=`
                  <div><strong>Artist:</strong> <span>${removeTrailingNumbers(albumData.artist)}</span></div>
                  ${albumData.year ? `<div><strong>Year:</strong><span>${albumData.year}</span></div>` : ''}
                  ${albumData.label ? `<div><strong>Label:</strong><span>${removeTrailingNumbers(albumData.label)}</span></div>` : ''}
                  ${formattedReleased && !/^\d{4}$/.test(formattedReleased) ? `<div><strong>Released:</strong><span>${formattedReleased}</span></div>` : ''}
                  ${albumData.format ? `<div><strong>Format:</strong><span>${albumData.format}</span></div>` : ''}
                  ${albumData.producer ? `<div><strong>Producer:</strong><span>${removeTrailingNumbers(albumData.producer)}</span></div>` : ''}
                  ${albumData.rating ? `<div class="rating-container"><strong>Rating:</strong><span class="rating-value">${albumData.rating}</span>${this.generateStarRating(albumData.rating)}${reviewsDisplay}</div>` : ''}
              `;if(!existingImage&&albumData.cover_url){const coverUrl=albumData.cover_url_medium||albumData.cover_url;console.log('Using cover URL from tracklist API:',coverUrl);const isCachedImage=coverUrl.includes('api/image_proxy.php');if(isCachedImage){console.log('Cached image detected, skipping loading state');coverImage.style.display='none';noCover.style.display='none';noCover.textContent=''}else{console.log('Non-cached image, showing loading state');noCover.textContent='Loading Cover...';noCover.style.display='flex';coverImage.style.display='none'}
coverImage.src=coverUrl;const imageTimeout=setTimeout(()=>{console.log('Image loading timeout');if(coverImage.style.display==='none'){coverImage.style.display='none';noCover.textContent='No Cover';noCover.style.display='flex'}},10000);coverImage.onload=function(){console.log('Cover image loaded successfully');clearTimeout(imageTimeout);coverImage.style.display='block';noCover.style.display='none';coverImage.classList.add('loaded')};coverImage.onerror=function(){console.log('Cover image failed to load');clearTimeout(imageTimeout);coverImage.style.display='none';noCover.textContent='No Cover';noCover.style.display='flex'}}else if(!existingImage&&!albumData.cover_url){console.log('No cover art available');coverImage.style.display='none';noCover.textContent='No Cover';noCover.style.display='flex'}
discogsLink.href=albumData.discogs_url;if(albumData.matched_reason){const matchInfo=document.createElement('div');matchInfo.className='tracklist-match-info';matchInfo.innerHTML=`<small>Matched: ${albumData.matched_reason}</small>`;tracks.appendChild(matchInfo)}
if(albumData.tracklist&&albumData.tracklist.length>0){tracks.innerHTML=`
                      <div class="tracklist-modal-tracks">
                          ${albumData.tracklist.map(track => `<div class="track-item"><span class="track-position">${track.position}</span><span class="track-title">${this.escapeHtml(track.title)}</span><span class="track-duration">${track.duration||''}</span></div>`).join('')}
                      </div>
                  `}else{tracks.innerHTML='<div class="tracklist-error">No tracklist available for this album</div>'}}else{tracks.innerHTML=`<div class="tracklist-error">${data.message || 'Could not load tracklist'}</div>`;discogsLink.href=`https://www.discogs.com/search/?q=${encodeURIComponent(artistName + ' ' + albumName)}&type=release`}}catch(error){tracks.innerHTML='<div class="tracklist-error">Error loading tracklist</div>';discogsLink.href=`https://www.discogs.com/search/?q=${encodeURIComponent(artistName + ' ' + albumName)}&type=release`}}
hideTracklistModal(){document.getElementById('tracklistModal').style.display='none'}
showLoginModal(){document.getElementById('loginModal').style.display='block';document.getElementById('password').focus();document.getElementById('loginMessage').style.display='none'}
hideLoginModal(){document.getElementById('loginModal').style.display='none';document.getElementById('password').value=''}
async handleLogin(event){event.preventDefault();const password=document.getElementById('password').value;const messageDiv=document.getElementById('loginMessage');try{const response=await fetch('api/music_api.php?action=login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({password:password})});const data=await response.json();if(data.success){this.isAuthenticated=!0;this.updateAuthUI();this.hideLoginModal();this.showMessage('Login successful','success')}else{messageDiv.textContent=data.message;messageDiv.className='modal-message error';messageDiv.style.display='block'}}catch(error){messageDiv.textContent='Login failed. Please try again.';messageDiv.className='modal-message error';messageDiv.style.display='block'}}
async handleLogout(){try{const response=await fetch('api/music_api.php?action=logout',{method:'POST',headers:{'Content-Type':'application/json'}});const data=await response.json();if(data.success){this.isAuthenticated=!1;this.updateAuthUI();this.showMessage('Logged out successfully','success')}}catch(error){}}
initLazyLoading(){if('IntersectionObserver' in window){const imageObserver=new IntersectionObserver((entries,observer)=>{entries.forEach(entry=>{if(entry.isIntersecting){const img=entry.target;this.loadOptimizedImage(img,img.dataset.src);img.classList.remove('lazy');img.classList.add('loaded');observer.unobserve(img)}})},{rootMargin:'50px 0px',threshold:0.01});document.querySelectorAll('img.lazy').forEach(img=>{imageObserver.observe(img)})}else{this.loadLazyImagesFallback()}}
loadLazyImagesFallback(){const lazyImages=document.querySelectorAll('img.lazy');const loadImage=(img)=>{if(img.dataset.src){this.loadOptimizedImage(img,img.dataset.src);img.classList.remove('lazy')}};lazyImages.forEach(img=>{if(this.isElementInViewport(img)){loadImage(img)}});const scrollHandler=()=>{lazyImages.forEach(img=>{if(img.classList.contains('lazy')&&this.isElementInViewport(img)){loadImage(img)}})};window.addEventListener('scroll',scrollHandler);window.addEventListener('resize',scrollHandler)}
isElementInViewport(el){const rect=el.getBoundingClientRect();return(rect.top>=0&&rect.left>=0&&rect.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&rect.right<=(window.innerWidth||document.documentElement.clientWidth))}
escapeHtml(text){const div=document.createElement('div');div.textContent=text;return div.innerHTML}
formatDate(dateString){if(!dateString)return'-';const date=new Date(dateString);return date.toLocaleDateString()}
loadOptimizedImage(img,src,fallbackSrc=null){const webpSupported=this.isWebPSupported();if(webpSupported&&src.includes('discogs.com')&&!src.includes('fm=webp')){const webpSrc=src.includes('?')?src+'&fm=webp':src+'?fm=webp';img.src=webpSrc;img.onerror=()=>{img.src=src;if(fallbackSrc){img.onerror=()=>{img.src=fallbackSrc}}}}else{img.src=src;if(fallbackSrc){img.onerror=()=>{img.src=fallbackSrc}}}}
isWebPSupported(){const canvas=document.createElement('canvas');canvas.width=1;canvas.height=1;return canvas.toDataURL('image/webp').indexOf('data:image/webp')===0}
generateStarRating(rating){const fullStars=Math.floor(rating);const decimal=rating%1;let fractionalStar='';if(decimal>=0.875){fractionalStar='filled'}else if(decimal>=0.625){fractionalStar='three-quarter'}else if(decimal>=0.375){fractionalStar='half'}else if(decimal>=0.125){fractionalStar='quarter'}
const totalStars=fullStars+(fractionalStar?1:0);const emptyStars=5-totalStars;let starsHTML='<span class="stars">';for(let i=0;i<fullStars;i++){starsHTML+='<span class="star filled">★</span>'}
if(fractionalStar&&fractionalStar!=='filled'){starsHTML+=`<span class="star ${fractionalStar}">★</span>`}else if(fractionalStar==='filled'){starsHTML+='<span class="star filled">★</span>'}
for(let i=0;i<emptyStars;i++){starsHTML+='<span class="star empty">☆</span>'}
starsHTML+='</span>';return starsHTML}
adjustAutocompletePosition(container,list){const modal=container.closest('.modal');if(!modal)return;const modalContent=modal.querySelector('.modal-content');const containerRect=container.getBoundingClientRect();const modalRect=modalContent.getBoundingClientRect();list.style.top='100%';list.style.bottom='auto';list.style.maxHeight='150px';const spaceBelow=modalRect.bottom-containerRect.bottom-20;const spaceAbove=containerRect.top-modalRect.top-20;const listHeight=Math.min(list.scrollHeight,150);if(spaceBelow<listHeight&&spaceAbove>listHeight){list.style.top='auto';list.style.bottom='100%';list.style.maxHeight=`${Math.min(spaceAbove, 150)}px`}else if(spaceBelow<listHeight){list.style.maxHeight=`${Math.max(spaceBelow, 100)}px`}else{list.style.maxHeight=`${Math.min(spaceBelow, 150)}px`}
const listWidth=list.offsetWidth;const containerWidth=container.offsetWidth;if(listWidth>containerWidth){list.style.width=`${containerWidth}px`}}
moveAutocompleteToBody(container,list){const modal=container.closest('.modal');if(!modal)return;if(list.parentNode!==document.body){document.body.appendChild(list);const containerRect=container.getBoundingClientRect();list.style.position='fixed';list.style.top=(containerRect.bottom+window.scrollY)+'px';list.style.left=containerRect.left+'px';list.style.width=containerRect.width+'px';list.style.zIndex='10000';list.style.backgroundColor='white';list.style.border='1px solid #ddd';list.style.borderRadius='4px';list.style.boxShadow='0 2px 8px rgba(0,0,0,0.1)';list.style.display='block';list.style.visibility='visible';list.style.opacity='1';list.dataset.originalContainer=container.id}}}
document.addEventListener('DOMContentLoaded',()=>{window.app=new MusicCollectionApp()})